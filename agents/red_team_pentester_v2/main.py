# agents/red_team_pentester_v2/main.py

import os
import json
import yaml
from google.cloud import bigquery, secretmanager
from google.cloud import aiplatform

from hackerone_parser import parse_scope
from scanner import scan_target
from learner import learn_from_finding
from reporter import report_finding
from config import load_config

# Initialize GCP clients
bigquery_client = bigquery.Client()
secret_manager_client = secretmanager.SecretManagerServiceClient()
aiplatform.init(project=os.environ.get("PROJECT_ID"), location=os.environ.get("REGION"))

def get_secret(secret_id, version_id="latest"):
    """Access the payload for the given secret version if one exists."""
    project_id = os.environ.get("PROJECT_ID")
    name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"
    response = secret_manager_client.access_secret_version(name=name)
    return response.payload.data.decode("UTF-8")

def main():
    config = load_config()
    project_id = os.environ.get("PROJECT_ID")
    region = os.environ.get("REGION")

    print(f"AI Red Team Agent (v2) starting in project {project_id}, region {region}")

    # Example: Read HackerOne scope from a secret or config file
    # For demonstration, let's assume a dummy scope file path
    scope_file_path = os.getenv("HACKERONE_SCOPE_FILE", "./hackerone_scope.json")
    
    # In a real scenario, this would be fetched securely, e.g., from Secret Manager
    # try:
    #     scope_content = get_secret("hackerone-scope")
    #     scope_data = json.loads(scope_content) # or yaml.safe_load
    # except Exception as e:
    #     print(f"Error fetching HackerOne scope: {e}")
    #     return

    # Dummy scope for initial testing
    dummy_scope = {
        "targets": [
            {"target": "http://example.com", "asset_type": "URL", "in_scope": True},
            {"target": "http://test.com", "asset_type": "URL", "in_scope": False}
        ]
    }
    scope_data = dummy_scope

    in_scope_targets = parse_scope(scope_data)
    print(f"Found {len(in_scope_targets)} in-scope targets.")

    for target in in_scope_targets:
        print(f"Scanning target: {target}")
        findings = scan_target(target, config)

        for finding in findings:
            print(f"  Found: {finding['name']} at {finding['url']}")
            # Store finding in BigQuery
            table_id = f"{project_id}.security_analytics.red_team_findings"
            rows_to_insert = [
                {
                    "timestamp": finding["timestamp"],
                    "target": finding["url"],
                    "vulnerability_name": finding["name"],
                    "severity": finding["severity"],
                    "description": finding["description"],
                    "recommendation": finding["recommendation"],
                    "agent_id": "red-team-pentester-v2",
                    "status": "new"
                }
            ]
            errors = bigquery_client.insert_rows_json(table_id, rows_to_insert)
            if errors:
                print(f"Encountered errors while inserting rows: {errors}")
            else:
                print("  Finding successfully stored in BigQuery.")
                learn_from_finding(finding, config) # Trigger learning process
                report_finding(finding, config) # Trigger reporting

    print("AI Red Team Agent (v2) finished scan cycle.")

if __name__ == "__main__":
    main()
