version: '3.8'

services:
  # Core Coordinator Service
  coordinator:
    build:
      context: ../
      dockerfile: deployment/docker/coordinator/Dockerfile
    container_name: aetherveil-coordinator
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD_FILE=/run/secrets/neo4j_password
      - ENCRYPTION_KEY_FILE=/run/secrets/encryption_key
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - OPENAI_API_KEY_FILE=/run/secrets/openai_api_key
      - ANTHROPIC_API_KEY_FILE=/run/secrets/anthropic_api_key
      - SHODAN_API_KEY_FILE=/run/secrets/shodan_api_key
      - CENSYS_API_ID_FILE=/run/secrets/censys_api_id
      - CENSYS_API_SECRET_FILE=/run/secrets/censys_api_secret
      - VIRUSTOTAL_API_KEY_FILE=/run/secrets/virustotal_api_key
      - ABUSEIPDB_API_KEY_FILE=/run/secrets/abuseipdb_api_key
      - GREYNOISE_API_KEY_FILE=/run/secrets/greynoise_api_key
      - ALIENVAULT_API_KEY_FILE=/run/secrets/alienvault_api_key
      - GRPC_PORT=50051
      - API_PORT=8000
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
    ports:
      - "8000:8000"
      - "50051:50051"
    volumes:
      - coordinator_data:/app/data
      - ./logs:/app/logs
      - ./certificates:/app/certificates:ro
    secrets:
      - neo4j_password
      - encryption_key
      - jwt_secret
      - openai_api_key
      - anthropic_api_key
      - shodan_api_key
      - censys_api_id
      - censys_api_secret
      - virustotal_api_key
      - abuseipdb_api_key
      - greynoise_api_key
      - alienvault_api_key
      - mtls_cert
      - mtls_key
      - mtls_ca
    depends_on:
      - redis
      - neo4j
      - vault
    networks:
      - aetherveil-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Enhanced Reconnaissance Agent
  reconnaissance-agent:
    build:
      context: ../
      dockerfile: deployment/docker/agents/reconnaissance/Dockerfile
    restart: unless-stopped
    environment:
      - AGENT_TYPE=reconnaissance
      - COORDINATOR_URL=grpc://coordinator:50051
      - REDIS_URL=redis://redis:6379
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    secrets:
      - mtls_cert
      - mtls_key
      - mtls_ca
    depends_on:
      - coordinator
      - redis
    networks:
      - aetherveil-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m

  # Enhanced Scanner Agent
  scanner-agent:
    build:
      context: ../
      dockerfile: deployment/docker/agents/scanner/Dockerfile
    restart: unless-stopped
    environment:
      - AGENT_TYPE=scanner
      - COORDINATOR_URL=grpc://coordinator:50051
      - REDIS_URL=redis://redis:6379
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
      - NUCLEI_TEMPLATES_DIR=/app/nuclei-templates
    volumes:
      - ./logs:/app/logs
      - nuclei_templates:/app/nuclei-templates
    secrets:
      - mtls_cert
      - mtls_key
      - mtls_ca
    depends_on:
      - coordinator
      - redis
    networks:
      - aetherveil-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Enhanced Exploiter Agent
  exploiter-agent:
    build:
      context: ../
      dockerfile: deployment/docker/agents/exploiter/Dockerfile
    restart: unless-stopped
    environment:
      - AGENT_TYPE=exploiter
      - COORDINATOR_URL=grpc://coordinator:50051
      - REDIS_URL=redis://redis:6379
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
      - METASPLOIT_ENABLED=true
      - SAFETY_MODE=true
    volumes:
      - ./logs:/app/logs
      - exploiter_payloads:/app/payloads
    secrets:
      - mtls_cert
      - mtls_key
      - mtls_ca
    depends_on:
      - coordinator
      - redis
    networks:
      - aetherveil-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Enhanced OSINT Agent
  osint-agent:
    build:
      context: ../
      dockerfile: deployment/docker/agents/osint/Dockerfile
    restart: unless-stopped
    environment:
      - AGENT_TYPE=osint
      - COORDINATOR_URL=grpc://coordinator:50051
      - REDIS_URL=redis://redis:6379
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
      - SHODAN_API_KEY_FILE=/run/secrets/shodan_api_key
      - CENSYS_API_ID_FILE=/run/secrets/censys_api_id
      - CENSYS_API_SECRET_FILE=/run/secrets/censys_api_secret
      - VIRUSTOTAL_API_KEY_FILE=/run/secrets/virustotal_api_key
      - ABUSEIPDB_API_KEY_FILE=/run/secrets/abuseipdb_api_key
    volumes:
      - ./logs:/app/logs
      - osint_data:/app/data
    secrets:
      - mtls_cert
      - mtls_key
      - mtls_ca
      - shodan_api_key
      - censys_api_id
      - censys_api_secret
      - virustotal_api_key
      - abuseipdb_api_key
    depends_on:
      - coordinator
      - redis
    networks:
      - aetherveil-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 384M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Advanced Stealth Agent
  stealth-agent:
    build:
      context: ../
      dockerfile: deployment/docker/agents/stealth/Dockerfile
    restart: unless-stopped
    environment:
      - AGENT_TYPE=stealth
      - COORDINATOR_URL=grpc://coordinator:50051
      - REDIS_URL=redis://redis:6379
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
      - TOR_ENABLED=true
      - PROXY_CHAINS_ENABLED=true
      - BEHAVIORAL_MIMICRY=true
    volumes:
      - ./logs:/app/logs
      - stealth_profiles:/app/profiles
    secrets:
      - mtls_cert
      - mtls_key
      - mtls_ca
    depends_on:
      - coordinator
      - redis
      - tor-proxy
    networks:
      - aetherveil-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m

  # Enhanced RL Agent
  rl-agent:
    build:
      context: ../
      dockerfile: deployment/docker/rl/Dockerfile
    restart: unless-stopped
    environment:
      - AGENT_TYPE=rl
      - COORDINATOR_URL=grpc://coordinator:50051
      - REDIS_URL=redis://redis:6379
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      - WANDB_DISABLED=true
    volumes:
      - ./logs:/app/logs
      - rl_models:/app/models
      - rl_data:/app/data
    secrets:
      - mtls_cert
      - mtls_key
      - mtls_ca
    depends_on:
      - coordinator
      - redis
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=1G

  # Report Generator Service
  report-generator:
    build:
      context: ../
      dockerfile: deployment/docker/reporting/Dockerfile
    restart: unless-stopped
    environment:
      - SERVICE_TYPE=report_generator
      - COORDINATOR_URL=grpc://coordinator:50051
      - REDIS_URL=redis://redis:6379
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
      - OPENAI_API_KEY_FILE=/run/secrets/openai_api_key
      - ANTHROPIC_API_KEY_FILE=/run/secrets/anthropic_api_key
      - GOOGLE_API_KEY_FILE=/run/secrets/google_api_key
      - GROQ_API_KEY_FILE=/run/secrets/groq_api_key
    volumes:
      - ./logs:/app/logs
      - report_templates:/app/templates
      - generated_reports:/app/reports
    secrets:
      - mtls_cert
      - mtls_key
      - mtls_ca
      - openai_api_key
      - anthropic_api_key
      - google_api_key
      - groq_api_key
    depends_on:
      - coordinator
      - redis
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Knowledge Graph Service
  knowledge-graph:
    build:
      context: ../
      dockerfile: deployment/docker/knowledge-graph/Dockerfile
    restart: unless-stopped
    environment:
      - SERVICE_TYPE=knowledge_graph
      - COORDINATOR_URL=grpc://coordinator:50051
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD_FILE=/run/secrets/neo4j_password
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
      - GRAPH_ANALYTICS_ENABLED=true
      - VISUALIZATION_ENABLED=true
    volumes:
      - ./logs:/app/logs
      - graph_data:/app/data
    secrets:
      - mtls_cert
      - mtls_key
      - mtls_ca
      - neo4j_password
    depends_on:
      - coordinator
      - redis
      - neo4j
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Web Dashboard
  web-dashboard:
    build:
      context: ../
      dockerfile: deployment/docker/dashboard/Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_URL=http://coordinator:8000
      - ENABLE_HTTPS=true
      - HTTPS_CERT_FILE=/run/secrets/https_cert
      - HTTPS_KEY_FILE=/run/secrets/https_key
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - ENABLE_MTLS=true
      - MTLS_CERT_FILE=/run/secrets/mtls_cert
      - MTLS_KEY_FILE=/run/secrets/mtls_key
      - MTLS_CA_FILE=/run/secrets/mtls_ca
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./logs:/app/logs
      - dashboard_data:/app/data
    secrets:
      - https_cert
      - https_key
      - jwt_secret
      - mtls_cert
      - mtls_key
      - mtls_ca
    depends_on:
      - coordinator
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m

  # Redis Database
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    secrets:
      - redis_password
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-enterprise
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    user: "7474:7474"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # HashiCorp Vault for Secret Management
  vault:
    image: vault:latest
    restart: unless-stopped
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./vault-config.hcl:/vault/config/vault.hcl:ro
    cap_add:
      - IPC_LOCK
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "100:1000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8200/v1/sys/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Tor Proxy for Stealth Operations
  tor-proxy:
    image: dperson/torproxy:latest
    restart: unless-stopped
    environment:
      - TOR_RELAY=1
      - TOR_BRIDGE=1
      - TOR_EXITNODE=1
    ports:
      - "8118:8118"
      - "9050:9050"
    volumes:
      - tor_data:/var/lib/tor
      - ./torrc:/etc/tor/torrc:ro
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'
    security_opt:
      - no-new-privileges:true
    user: "100:101"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - aetherveil-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # Log Aggregation
  fluentd:
    image: fluent/fluentd:latest
    restart: unless-stopped
    volumes:
      - ./logs:/fluentd/log
      - ./fluentd/conf:/fluentd/etc
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "100:101"

  # Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - coordinator
      - web-dashboard
    networks:
      - aetherveil-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'
    security_opt:
      - no-new-privileges:true
    user: "101:101"
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m
      - /var/cache/nginx:rw,noexec,nosuid,size=50m

volumes:
  # Persistent data volumes
  coordinator_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/coordinator
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/redis
      o: bind
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/neo4j
      o: bind
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs/neo4j
      o: bind
  neo4j_import:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/neo4j/import
      o: bind
  neo4j_plugins:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/neo4j/plugins
      o: bind
  vault_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/vault
      o: bind
  vault_logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs/vault
      o: bind
  tor_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/tor
      o: bind
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/prometheus
      o: bind
  grafana_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/grafana
      o: bind
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs/nginx
      o: bind
  
  # Application-specific volumes
  nuclei_templates:
    driver: local
  exploiter_payloads:
    driver: local
  osint_data:
    driver: local
  stealth_profiles:
    driver: local
  rl_models:
    driver: local
  rl_data:
    driver: local
  report_templates:
    driver: local
  generated_reports:
    driver: local
  graph_data:
    driver: local
  dashboard_data:
    driver: local

networks:
  aetherveil-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: aetherveil0
      com.docker.network.driver.mtu: 1500
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "com.aetherveil.network=main"
      - "com.aetherveil.environment=production"

secrets:
  # Database passwords
  neo4j_password:
    external: true
  redis_password:
    external: true
  
  # Encryption keys
  encryption_key:
    external: true
  jwt_secret:
    external: true
  
  # API keys
  openai_api_key:
    external: true
  anthropic_api_key:
    external: true
  google_api_key:
    external: true
  groq_api_key:
    external: true
  shodan_api_key:
    external: true
  censys_api_id:
    external: true
  censys_api_secret:
    external: true
  virustotal_api_key:
    external: true
  abuseipdb_api_key:
    external: true
  greynoise_api_key:
    external: true
  alienvault_api_key:
    external: true
  
  # TLS certificates
  mtls_cert:
    external: true
  mtls_key:
    external: true
  mtls_ca:
    external: true
  https_cert:
    external: true
  https_key:
    external: true

x-common-variables: &common-variables
  PYTHONPATH: /app
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  TZ: UTC
  LANG: en_US.UTF-8
  LC_ALL: en_US.UTF-8

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    compress: "true"