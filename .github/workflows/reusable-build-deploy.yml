# Reusable Build, Scan, and Deploy Workflow

name: Reusable Build and Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_SERVICE_ACCOUNT_EMAIL:
        required: true
      GCP_PROJECT_ID:
        required: true

env:
  GCP_REGION: us-central1
  GCP_ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  IMAGE_TAG: ${{ inputs.image_tag }}
  ENVIRONMENT: ${{ inputs.environment }}

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    name: Build and Scan Images
    permissions:
      contents: read
      id-token: write # Required for GCP OIDC
    strategy:
      matrix:
        component: [coordinator, reconnaissance, scanner, osint, stealth, exploiter]
    steps:
    - uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Artifact Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GCP_ARTIFACT_REGISTRY }}
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Build and push ${{ matrix.component }} image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/${{ matrix.component }}/Dockerfile
        push: true
        tags: |
          ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/aetherveil/${{ matrix.component }}:${{ env.IMAGE_TAG }}
          ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/aetherveil/${{ matrix.component }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: '${{ env.GCP_ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/aetherveil/${{ matrix.component }}:${{ env.IMAGE_TAG }}'
        format: 'sarif'
        output: 'trivy-${{ matrix.component }}.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-${{ matrix.component }}
        path: trivy-${{ matrix.component }}.sarif

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to ${{ inputs.environment }}
    needs: [build-and-scan]
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write # Required for GCP OIDC
    steps:
    - uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Run
      run: |
        gcloud run services replace deployment/gcp/cloud_run_deployment.yaml \
          --region=${{ env.GCP_REGION }} \
          --project=${{ secrets.GCP_PROJECT_ID }}
      env:
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}

  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup old images
    needs: [deploy]
    if: always() && inputs.environment == 'production'
    permissions:
      id-token: write # Required for GCP OIDC
    steps:
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Clean up old container images
      run: |
        for component in coordinator reconnaissance scanner osint stealth exploiter; do
          echo "Cleaning up images for aetherveil-${component}"
          gcloud artifacts docker images list ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/aetherveil/${component} \
            --sort-by=~CREATE_TIME --limit=10 --format='get(version)' | tail -n +1 | \
            xargs -I {} gcloud artifacts docker images delete ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/aetherveil/${component}:{} --delete-tags --quiet || echo "Cleanup for ${component} failed or no old images found."
        done