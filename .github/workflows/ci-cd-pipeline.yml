name: Aetherveil Sentinel CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code Quality and Security Analysis
  security-analysis:
    runs-on: ubuntu-latest
    name: Security Analysis
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
        npm install -g retire audit-ci
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json .
    
    - name: Retire.js Security Scan
      run: |
        retire --js --outputformat json --outputpath retire-report.json . || true
        retire --js .
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          retire-report.json
    
    - name: Security Gate
      run: |
        python scripts/security_gate.py
      env:
        BANDIT_REPORT: bandit-report.json
        SAFETY_REPORT: safety-report.json
        SEMGREP_REPORT: semgrep-report.json

  # Static Code Analysis
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pylint flake8 black isort mypy pytest-cov
    
    - name: Run Black (Code Formatting)
      run: |
        black --check --diff .
    
    - name: Run isort (Import Sorting)
      run: |
        isort --check-only --diff .
    
    - name: Run Flake8 (Style Guide)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Pylint (Code Analysis)
      run: |
        pylint --output-format=json --output=pylint-report.json aetherveil_sentinel/ || true
        pylint aetherveil_sentinel/
    
    - name: Run MyPy (Type Checking)
      run: |
        mypy aetherveil_sentinel/ --json-report mypy-report || true
        mypy aetherveil_sentinel/
    
    - name: Upload Code Quality Reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: |
          pylint-report.json
          mypy-report/

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      neo4j:
        image: neo4j:5-community
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: Wait for services
      run: |
        sleep 10
        redis-cli -h localhost ping
        python -c "from neo4j import GraphDatabase; driver = GraphDatabase.driver('bolt://localhost:7687', auth=('neo4j', 'testpassword')); driver.verify_connectivity(); driver.close()"
    
    - name: Run Unit Tests
      run: |
        pytest tests/unit/ -v --cov=aetherveil_sentinel --cov-report=xml --cov-report=term-missing
      env:
        REDIS_URL: redis://localhost:6379
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio docker-compose
    
    - name: Start test environment
      run: |
        docker-compose -f deployment/docker-compose.test.yml up -d
        sleep 30
    
    - name: Run Integration Tests
      run: |
        pytest tests/integration/ -v --tb=short
      env:
        TEST_ENVIRONMENT: integration
    
    - name: Collect logs
      if: failure()
      run: |
        docker-compose -f deployment/docker-compose.test.yml logs > integration-logs.txt
    
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: integration-test-logs
        path: integration-logs.txt
    
    - name: Clean up test environment
      if: always()
      run: |
        docker-compose -f deployment/docker-compose.test.yml down -v

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    needs: [unit-tests, integration-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest selenium
    
    - name: Start full system
      run: |
        docker-compose -f deployment/enhanced_docker_compose.yml up -d
        sleep 60
    
    - name: Wait for services to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
    
    - name: Run E2E Tests
      run: |
        pytest tests/e2e/ -v --tb=short
      env:
        BASE_URL: http://localhost:8000
        DASHBOARD_URL: http://localhost:3000
    
    - name: Screenshot on failure
      if: failure()
      run: |
        docker-compose -f deployment/enhanced_docker_compose.yml logs > e2e-logs.txt
        curl -f http://localhost:8000/api/health > health-check.json || true
    
    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-artifacts
        path: |
          e2e-logs.txt
          health-check.json
          screenshots/
    
    - name: Clean up
      if: always()
      run: |
        docker-compose -f deployment/enhanced_docker_compose.yml down -v

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [unit-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust pytest-benchmark
    
    - name: Start performance test environment
      run: |
        docker-compose -f deployment/docker-compose.perf.yml up -d
        sleep 30
    
    - name: Run Performance Tests
      run: |
        pytest tests/performance/ -v --benchmark-json=benchmark-report.json
        locust -f tests/performance/load_test.py --headless -u 50 -r 10 -t 300s --host=http://localhost:8000
    
    - name: Upload Performance Reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          benchmark-report.json
          locust-report.html
    
    - name: Clean up
      if: always()
      run: |
        docker-compose -f deployment/docker-compose.perf.yml down -v

  # Build and Push Images
  build-images:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: [security-analysis, code-quality, unit-tests]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    
    - name: Build and push coordinator image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployment/docker/coordinator/Dockerfile
        push: true
        tags: |
          gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-coordinator:latest
          gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-coordinator:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push agent images
      run: |
        agents=("reconnaissance" "scanner" "osint" "stealth" "rl" "exploiter")
        for agent in "${agents[@]}"; do
          docker buildx build \
            --platform linux/amd64 \
            --file deployment/docker/agents/${agent}/Dockerfile \
            --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-${agent}-agent:latest \
            --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-${agent}-agent:${{ github.sha }} \
            --push .
        done
    
    - name: Build and push supporting service images
      run: |
        services=("reporting" "knowledge-graph" "dashboard")
        for service in "${services[@]}"; do
          docker buildx build \
            --platform linux/amd64 \
            --file deployment/docker/${service}/Dockerfile \
            --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-${service}:latest \
            --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-${service}:${{ github.sha }} \
            --push .
        done

  # Vulnerability Scanning
  vulnerability-scan:
    runs-on: ubuntu-latest
    name: Container Vulnerability Scanning
    needs: [build-images]
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    
    - name: Scan coordinator image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-coordinator:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-coordinator.sarif'
    
    - name: Scan agent images
      run: |
        agents=("reconnaissance" "scanner" "osint" "stealth" "rl" "exploiter")
        for agent in "${agents[@]}"; do
          trivy image --format sarif --output trivy-${agent}.sarif \
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-${agent}-agent:${{ github.sha }}
        done
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-coordinator.sarif'
    
    - name: Check for critical vulnerabilities
      run: |
        python scripts/vulnerability_check.py trivy-*.sarif

  # Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build-images, vulnerability-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Deploy to Cloud Run (Staging)
      run: |
        envsubst < deployment/gcp/cloud_run_deployment.yaml | gcloud run services replace --region=us-central1 -
        gcloud run services update-traffic aetherveil-coordinator --to-latest --region=us-central1
      env:
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: staging
    
    - name: Run smoke tests
      run: |
        python tests/smoke/staging_smoke_test.py
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
        API_KEY: ${{ secrets.STAGING_API_KEY }}
    
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "Staging deployment successful! :rocket:"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "Staging deployment failed! :warning:"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build-images, vulnerability-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Deploy to Cloud Run (Production)
      run: |
        envsubst < deployment/gcp/cloud_run_deployment.yaml | gcloud run services replace --region=us-central1 -
        gcloud run services update-traffic aetherveil-coordinator --to-latest --region=us-central1
      env:
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: production
    
    - name: Run production health checks
      run: |
        python tests/smoke/production_health_check.py
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
    
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated production deployment
          Commit: ${{ github.sha }}
          Images:
          - gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-coordinator:${{ github.sha }}
        draft: false
        prerelease: false
    
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "Production deployment successful! :tada:"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "Production deployment failed! :fire:"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup old images
    needs: [deploy-production]
    if: always()
    steps:
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Clean up old container images
      run: |
        # Keep only the latest 10 images
        gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-coordinator \
          --limit=999999 --sort-by=TIMESTAMP --format='get(digest)' | tail -n +11 | \
          xargs -I {} gcloud container images delete gcr.io/${{ secrets.GCP_PROJECT_ID }}/aetherveil-coordinator@{} --force-delete-tags --quiet
    
    - name: Prune unused Docker resources
      run: |
        docker system prune -af
        docker volume prune -f